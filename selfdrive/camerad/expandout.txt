# 1 "capturev4l2.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 334 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "capturev4l2.c" 2
# 1 "/data/data/com.termux/files/usr/include/errno.h" 1 3 4
# 31 "/data/data/com.termux/files/usr/include/errno.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 1 3 4
# 77 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/cdefs_elf.h" 1 3 4
# 78 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 2 3 4
# 547 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/android/api-level.h" 1 3 4
# 548 "/data/data/com.termux/files/usr/include/sys/cdefs.h" 2 3 4
# 32 "/data/data/com.termux/files/usr/include/errno.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/errno.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/linux/errno.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/errno.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/errno.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/errno.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/asm-generic/errno.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/errno-base.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm-generic/errno.h" 2 3 4
# 20 "/data/data/com.termux/files/usr/include/asm/errno.h" 2 3 4
# 20 "/data/data/com.termux/files/usr/include/linux/errno.h" 2 3 4
# 33 "/data/data/com.termux/files/usr/include/errno.h" 2 3 4
# 44 "/data/data/com.termux/files/usr/include/errno.h" 3 4
extern volatile int* __errno(void) __attribute__((__const__));
# 2 "capturev4l2.c" 2
# 1 "/data/data/com.termux/files/usr/include/fcntl.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/fcntl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/types.h" 1 3 4
# 31 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 51 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 62 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 90 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 118 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/__stddef_max_align_t.h" 1 3 4
# 35 "/system/comma/usr/bin/../lib/clang/4.0.0/include/__stddef_max_align_t.h" 3 4
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 119 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 2 3 4
# 32 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stdint.h" 1 3 4
# 63 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stdint.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/stdint.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/stdint.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/stdint.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/machine/wchar_limits.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/stdint.h" 2 3 4

typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long __int64_t;
typedef unsigned long __uint64_t;






typedef long __intptr_t;
typedef unsigned long __uintptr_t;





typedef __int8_t int8_t;
typedef __uint8_t uint8_t;

typedef __int16_t int16_t;
typedef __uint16_t uint16_t;

typedef __int32_t int32_t;
typedef __uint32_t uint32_t;

typedef __int64_t int64_t;
typedef __uint64_t uint64_t;

typedef __intptr_t intptr_t;
typedef __uintptr_t uintptr_t;

typedef int8_t int_least8_t;
typedef uint8_t uint_least8_t;

typedef int16_t int_least16_t;
typedef uint16_t uint_least16_t;

typedef int32_t int_least32_t;
typedef uint32_t uint_least32_t;

typedef int64_t int_least64_t;
typedef uint64_t uint_least64_t;

typedef int8_t int_fast8_t;
typedef uint8_t uint_fast8_t;

typedef int64_t int_fast64_t;
typedef uint64_t uint_fast64_t;


typedef int64_t int_fast16_t;
typedef uint64_t uint_fast16_t;
typedef int64_t int_fast32_t;
typedef uint64_t uint_fast32_t;







typedef uint64_t uintmax_t;
typedef int64_t intmax_t;
# 64 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stdint.h" 2 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/linux/types.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/linux/types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/types.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/types.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/asm-generic/types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/int-ll64.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/bitsperlong.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm/bitsperlong.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 23 "/data/data/com.termux/files/usr/include/asm/bitsperlong.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/asm-generic/int-ll64.h" 2 3 4


typedef __signed__ char __s8;
typedef unsigned char __u8;
typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;

__extension__ typedef __signed__ long long __s64;

__extension__ typedef unsigned long long __u64;
# 22 "/data/data/com.termux/files/usr/include/asm-generic/types.h" 2 3 4
# 20 "/data/data/com.termux/files/usr/include/asm/types.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/linux/types.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/stddef.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/linux/stddef.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/compiler.h" 1 3 4
# 20 "/data/data/com.termux/files/usr/include/linux/stddef.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 2 3 4



typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;

typedef void (*__kernel_sighandler_t)(int);
typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/data/data/com.termux/files/usr/include/asm/posix_types.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/posix_types.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/posix_types.h" 1 3 4
# 24 "/data/data/com.termux/files/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;


typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;


typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;



typedef __kernel_uid_t __kernel_old_uid_t;
typedef __kernel_gid_t __kernel_old_gid_t;



typedef unsigned int __kernel_old_dev_t;
# 76 "/data/data/com.termux/files/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;

typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;


typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_time_t;
typedef __kernel_long_t __kernel_clock_t;

typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;

typedef unsigned short __kernel_gid16_t;
# 20 "/data/data/com.termux/files/usr/include/asm/posix_types.h" 2 3 4
# 33 "/data/data/com.termux/files/usr/include/linux/posix_types.h" 2 3 4
# 25 "/data/data/com.termux/files/usr/include/linux/types.h" 2 3 4


typedef __u16 __le16;

typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;

typedef __u64 __be64;
typedef __u16 __sum16;
typedef __u32 __wsum;
# 36 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4



typedef __kernel_gid32_t __gid_t;
typedef __gid_t gid_t;
typedef __kernel_uid32_t __uid_t;
typedef __uid_t uid_t;
typedef __kernel_pid_t __pid_t;
typedef __pid_t pid_t;
typedef uint32_t __id_t;
typedef __id_t id_t;

typedef unsigned long blkcnt_t;
typedef unsigned long blksize_t;
typedef __kernel_caddr_t caddr_t;
typedef __kernel_clock_t clock_t;

typedef __kernel_clockid_t __clockid_t;
typedef __clockid_t clockid_t;

typedef __kernel_daddr_t daddr_t;
typedef unsigned long fsblkcnt_t;
typedef unsigned long fsfilcnt_t;

typedef __kernel_mode_t __mode_t;
typedef __mode_t mode_t;

typedef __kernel_key_t __key_t;
typedef __key_t key_t;

typedef __kernel_ino_t __ino_t;
typedef __ino_t ino_t;

typedef uint32_t __nlink_t;
typedef __nlink_t nlink_t;

typedef void* __timer_t;
typedef __timer_t timer_t;

typedef __kernel_suseconds_t __suseconds_t;
typedef __suseconds_t suseconds_t;


typedef uint32_t __useconds_t;
typedef __useconds_t useconds_t;





typedef uint64_t dev_t;



typedef __kernel_time_t __time_t;
typedef __time_t time_t;
# 101 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
typedef __kernel_off_t off_t;
typedef off_t loff_t;
typedef loff_t off64_t;
# 125 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
typedef uint32_t __socklen_t;

typedef __socklen_t socklen_t;

typedef __builtin_va_list __va_list;
# 138 "/data/data/com.termux/files/usr/include/sys/types.h" 3 4
typedef __kernel_ssize_t ssize_t;


typedef unsigned int uint_t;
typedef unsigned int uint;



# 1 "/data/data/com.termux/files/usr/include/sys/sysmacros.h" 1 3 4
# 46 "/data/data/com.termux/files/usr/include/sys/sysmacros.h" 3 4
static __inline__ dev_t makedev(int __ma, int __mi)
{
  return ((__ma & 0xfff) << 8) | (__mi & 0xff) | ((__mi & 0xfff00) << 12);
}
# 146 "/data/data/com.termux/files/usr/include/sys/types.h" 2 3 4


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef uint32_t u_int32_t;
typedef uint16_t u_int16_t;
typedef uint8_t u_int8_t;
typedef uint64_t u_int64_t;
# 34 "/data/data/com.termux/files/usr/include/fcntl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/fadvise.h" 1 3 4
# 35 "/data/data/com.termux/files/usr/include/fcntl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/fcntl.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/linux/fcntl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/fcntl.h" 1 3 4
# 26 "/data/data/com.termux/files/usr/include/asm/fcntl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 1 3 4
# 142 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 3 4
struct f_owner_ex {

 int type;
 __kernel_pid_t pid;
};
# 176 "/data/data/com.termux/files/usr/include/asm-generic/fcntl.h" 3 4
struct flock {
 short l_type;

 short l_whence;
 __kernel_off_t l_start;
 __kernel_off_t l_len;
 __kernel_pid_t l_pid;


};
# 27 "/data/data/com.termux/files/usr/include/asm/fcntl.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/linux/fcntl.h" 2 3 4
# 36 "/data/data/com.termux/files/usr/include/fcntl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/uio.h" 1 3 4
# 24 "/data/data/com.termux/files/usr/include/linux/uio.h" 3 4
struct iovec
{
 void *iov_base;
 __kernel_size_t iov_len;

};
# 37 "/data/data/com.termux/files/usr/include/fcntl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/unistd.h" 1 3 4
# 31 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/sys/select.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/time.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/time.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/time.h" 1 3 4
# 25 "/data/data/com.termux/files/usr/include/linux/time.h" 3 4
struct timespec {
 __kernel_time_t tv_sec;
 long tv_nsec;

};

struct timeval {
 __kernel_time_t tv_sec;

 __kernel_suseconds_t tv_usec;
};
struct timezone {
 int tz_minuteswest;

 int tz_dsttime;
};




struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;

};
struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;

};
# 34 "/data/data/com.termux/files/usr/include/sys/time.h" 2 3 4



extern int gettimeofday(struct timeval *, struct timezone *);
extern int settimeofday(const struct timeval *, const struct timezone *);

extern int getitimer(int, struct itimerval *);
extern int setitimer(int, const struct itimerval *, struct itimerval *);

extern int utimes(const char *, const struct timeval *);
# 34 "/data/data/com.termux/files/usr/include/sys/select.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/signal.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/signal.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/limits.h" 1 3 4
# 37 "/system/comma/usr/bin/../lib/clang/4.0.0/include/limits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/limits.h" 1 3 4
# 86 "/data/data/com.termux/files/usr/include/limits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/limits.h" 1 3 4
# 30 "/data/data/com.termux/files/usr/include/sys/limits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/limits.h" 1 3 4
# 31 "/data/data/com.termux/files/usr/include/sys/limits.h" 2 3 4
# 87 "/data/data/com.termux/files/usr/include/limits.h" 2 3 4


# 1 "/data/data/com.termux/files/usr/include/sys/syslimits.h" 1 3 4
# 90 "/data/data/com.termux/files/usr/include/limits.h" 2 3 4
# 38 "/system/comma/usr/bin/../lib/clang/4.0.0/include/limits.h" 2 3 4
# 35 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/string.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/string.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/string.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/malloc.h" 1 3 4
# 26 "/data/data/com.termux/files/usr/include/malloc.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 27 "/data/data/com.termux/files/usr/include/malloc.h" 2 3 4



extern void* malloc(size_t byte_count) __attribute__((malloc)) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1)));
extern void* calloc(size_t item_count, size_t item_size) __attribute__((malloc)) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(1,2)));
extern void* realloc(void* p, size_t byte_count) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
extern void free(void* p);

extern void* memalign(size_t alignment, size_t byte_count) __attribute__((malloc)) __attribute__((__warn_unused_result__)) __attribute__((alloc_size(2)));
extern size_t malloc_usable_size(const void* p);



struct mallinfo {
  size_t arena;
  size_t ordblks;
  size_t smblks;
  size_t hblks;
  size_t hblkhd;
  size_t usmblks;
  size_t fsmblks;
  size_t uordblks;
  size_t fordblks;
  size_t keepcost;
};


extern struct mallinfo mallinfo(void);
# 34 "/data/data/com.termux/files/usr/include/string.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/xlocale.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/xlocale.h" 3 4
struct __locale_t;
typedef struct __locale_t* locale_t;
# 35 "/data/data/com.termux/files/usr/include/string.h" 2 3 4



extern void* memccpy(void* __restrict, const void* __restrict, int, size_t);
extern void* memchr(const void *, int, size_t) __attribute__((pure));
extern void* memrchr(const void *, int, size_t) __attribute__((pure));
extern int memcmp(const void *, const void *, size_t) __attribute__((pure));
extern void* memcpy(void* __restrict, const void* __restrict, size_t);
extern void* memmove(void *, const void *, size_t);
extern void* memset(void *, int, size_t);
extern void* memmem(const void *, size_t, const void *, size_t) __attribute__((pure));

extern char* strchr(const char *, int) __attribute__((pure));
extern char* __strchr_chk(const char *, int, size_t);

extern char* strrchr(const char *, int) __attribute__((pure));
extern char* __strrchr_chk(const char *, int, size_t);

extern size_t strlen(const char *) __attribute__((pure));
extern size_t __strlen_chk(const char *, size_t);
extern int strcmp(const char *, const char *) __attribute__((pure));
extern char* stpcpy(char* __restrict, const char* __restrict);
extern char* strcpy(char* __restrict, const char* __restrict);
extern char* strcat(char* __restrict, const char* __restrict);

extern int strcasecmp(const char *, const char *) __attribute__((pure));
extern int strncasecmp(const char *, const char *, size_t) __attribute__((pure));
extern char* strdup(const char *);

extern char* strstr(const char *, const char *) __attribute__((pure));
extern char* strcasestr(const char *haystack, const char *needle) __attribute__((pure));
extern char* strtok(char* __restrict, const char* __restrict);
extern char* strtok_r(char* __restrict, const char* __restrict, char** __restrict);

extern char* strerror(int);
extern int strerror_r(int errnum, char *buf, size_t n);

extern size_t strnlen(const char *, size_t) __attribute__((pure));
extern char* strncat(char* __restrict, const char* __restrict, size_t);
extern char* strndup(const char *, size_t);
extern int strncmp(const char *, const char *, size_t) __attribute__((pure));
extern char* stpncpy(char* __restrict, const char* __restrict, size_t);
extern char* strncpy(char* __restrict, const char* __restrict, size_t);

extern size_t strlcat(char* __restrict, const char* __restrict, size_t);
extern size_t strlcpy(char* __restrict, const char* __restrict, size_t);

extern size_t strcspn(const char *, const char *) __attribute__((pure));
extern char* strpbrk(const char *, const char *) __attribute__((pure));
extern char* strsep(char** __restrict, const char* __restrict);
extern size_t strspn(const char *, const char *);

extern char* strsignal(int sig);

extern int strcoll(const char *, const char *) __attribute__((pure));
extern size_t strxfrm(char* __restrict, const char* __restrict, size_t);

extern int strcoll_l(const char *, const char *, locale_t) __attribute__((pure));
extern size_t strxfrm_l(char* __restrict, const char* __restrict, size_t, locale_t);
# 36 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/asm/sigcontext.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm/sigcontext.h" 3 4
struct sigcontext {

 __u64 fault_address;
 __u64 regs[31];
 __u64 sp;
 __u64 pc;

 __u64 pstate;
 __u8 __reserved[4096] __attribute__((__aligned__(16)));
};
struct _aarch64_ctx {

 __u32 magic;
 __u32 size;
};


struct fpsimd_context {
 struct _aarch64_ctx head;
 __u32 fpsr;
 __u32 fpcr;

 __uint128_t vregs[32];
};
# 38 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4





# 1 "/data/data/com.termux/files/usr/include/linux/signal.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/linux/signal.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/signal.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm/signal.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/signal.h" 1 3 4
# 89 "/data/data/com.termux/files/usr/include/asm-generic/signal.h" 3 4
typedef struct {
 unsigned long sig[(64 / 64)];
} sigset_t;
typedef unsigned long old_sigset_t;


# 1 "/data/data/com.termux/files/usr/include/asm-generic/signal-defs.h" 1 3 4
# 35 "/data/data/com.termux/files/usr/include/asm-generic/signal-defs.h" 3 4
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;
typedef void __restorefn_t(void);

typedef __restorefn_t *__sigrestore_t;
# 95 "/data/data/com.termux/files/usr/include/asm-generic/signal.h" 2 3 4




struct __kernel_sigaction {
 __sighandler_t sa_handler;
 unsigned long sa_flags;


 __sigrestore_t sa_restorer;

 sigset_t sa_mask;
};

typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;
 size_t ss_size;

} stack_t;
# 23 "/data/data/com.termux/files/usr/include/asm/signal.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/linux/signal.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/siginfo.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm/siginfo.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 1 3 4
# 24 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 3 4
typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 54 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 3 4
typedef struct siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
 int _pad[((128 - (4 * sizeof(int))) / sizeof(int))];
 struct {
 __kernel_pid_t _pid;

 __kernel_uid32_t _uid;
 } _kill;
 struct {
 __kernel_timer_t _tid;

 int _overrun;
 char _pad[sizeof( __kernel_uid32_t) - sizeof(int)];
 sigval_t _sigval;
 int _sys_private;

 } _timer;
 struct {
 __kernel_pid_t _pid;
 __kernel_uid32_t _uid;

 sigval_t _sigval;
 } _rt;
 struct {
 __kernel_pid_t _pid;

 __kernel_uid32_t _uid;
 int _status;
 __kernel_clock_t _utime;
 __kernel_clock_t _stime;

 } _sigchld;
 struct {
 void *_addr;




 short _addr_lsb;
 } _sigfault;

 struct {
 long _band;
 int _fd;
 } _sigpoll;

 struct {
 void *_call_addr;
 int _syscall;
 unsigned int _arch;

 } _sigsys;
 } _sifields;
} siginfo_t;
# 240 "/data/data/com.termux/files/usr/include/asm-generic/siginfo.h" 3 4
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;

 int sigev_notify;
 union {
 int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
 int _tid;

 struct {
 void (*_function)(sigval_t);
 void *_attribute;
 } _sigev_thread;

 } _sigev_un;
} sigevent_t;
# 23 "/data/data/com.termux/files/usr/include/asm/siginfo.h" 2 3 4
# 23 "/data/data/com.termux/files/usr/include/linux/signal.h" 2 3 4
# 44 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4







# 1 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 1 3 4
# 32 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/signal.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/user.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/user.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/sys/user.h" 2 3 4
# 242 "/data/data/com.termux/files/usr/include/sys/user.h" 3 4
struct user_regs_struct {
  uint64_t regs[31];
  uint64_t sp;
  uint64_t pc;
  uint64_t pstate;
};
struct user_fpsimd_struct {
  __uint128_t vregs[32];
  uint32_t fpsr;
  uint32_t fpcr;
};
# 34 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 2 3 4
# 83 "/data/data/com.termux/files/usr/include/sys/ucontext.h" 3 4
typedef unsigned long greg_t;
typedef greg_t gregset_t[34];
typedef struct user_fpsimd_struct fpregset_t;


typedef struct sigcontext mcontext_t;

typedef struct ucontext {
  unsigned long uc_flags;
  struct ucontext *uc_link;
  stack_t uc_stack;
  sigset_t uc_sigmask;

  char __padding[128 - sizeof(sigset_t)];
  mcontext_t uc_mcontext;
} ucontext_t;
# 52 "/data/data/com.termux/files/usr/include/signal.h" 2 3 4




typedef int sig_atomic_t;
# 70 "/data/data/com.termux/files/usr/include/signal.h" 3 4
extern int __libc_current_sigrtmin(void);
extern int __libc_current_sigrtmax(void);

extern const char* const sys_siglist[];
extern const char* const sys_signame[];

typedef __sighandler_t sig_t;
typedef __sighandler_t sighandler_t;





struct sigaction {
  unsigned int sa_flags;
  union {
    sighandler_t sa_handler;
    void (*sa_sigaction)(int, struct siginfo*, void*);
  };
  sigset_t sa_mask;
  void (*sa_restorer)(void);
};
# 106 "/data/data/com.termux/files/usr/include/signal.h" 3 4
extern int sigaction(int, const struct sigaction*, struct sigaction*);

extern sighandler_t signal(int, sighandler_t);

extern int siginterrupt(int, int);

extern int sigaddset(sigset_t*, int);
extern int sigdelset(sigset_t*, int);
extern int sigemptyset(sigset_t*);
extern int sigfillset(sigset_t*);
extern int sigismember(const sigset_t*, int);

extern int sigpending(sigset_t*) __attribute__((__nonnull__ (1)));
extern int sigprocmask(int, const sigset_t*, sigset_t*);
extern int sigsuspend(const sigset_t*) __attribute__((__nonnull__ (1)));
extern int sigwait(const sigset_t*, int*) __attribute__((__nonnull__ (1, 2)));

extern int raise(int);
extern int kill(pid_t, int);
extern int killpg(int, int);

extern int sigaltstack(const stack_t*, stack_t*);

extern void psiginfo(const siginfo_t*, const char*);
extern void psignal(int, const char*);
# 36 "/data/data/com.termux/files/usr/include/sys/select.h" 2 3 4





typedef unsigned long fd_mask;



typedef struct {
  unsigned long fds_bits[(1024/(8 * sizeof(unsigned long)))];
} fd_set;
# 68 "/data/data/com.termux/files/usr/include/sys/select.h" 3 4
extern int select(int, fd_set*, fd_set*, fd_set*, struct timeval*);
extern int pselect(int, fd_set*, fd_set*, fd_set*, const struct timespec*, const sigset_t*);
# 35 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/sysconf.h" 1 3 4
# 132 "/data/data/com.termux/files/usr/include/sys/sysconf.h" 3 4
long sysconf(int name);
# 36 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/pathconf.h" 1 3 4
# 58 "/data/data/com.termux/files/usr/include/pathconf.h" 3 4
extern long fpathconf(int fildes, int name);
extern long pathconf(const char *path, int name);
# 37 "/data/data/com.termux/files/usr/include/unistd.h" 2 3 4
# 50 "/data/data/com.termux/files/usr/include/unistd.h" 3 4
extern char** environ;

extern __attribute__((__noreturn__)) void _exit(int);

extern pid_t fork(void);
extern pid_t vfork(void);
extern pid_t getpid(void);
extern pid_t gettid(void) __attribute__((__const__));
extern pid_t getpgid(pid_t);
extern int setpgid(pid_t, pid_t);
extern pid_t getppid(void);
extern pid_t getpgrp(void);
extern int setpgrp(void);
extern pid_t getsid(pid_t);
extern pid_t setsid(void);

extern int execv(const char *, char * const *);
extern int execvp(const char *, char * const *);
extern int execvpe(const char *, char * const *, char * const *);
extern int execve(const char *, char * const *, char * const *);
extern int execl(const char *, const char *, ...);
extern int execlp(const char *, const char *, ...);
extern int execle(const char *, const char *, ...);

extern int nice(int);

extern int setuid(uid_t);
extern uid_t getuid(void);
extern int seteuid(uid_t);
extern uid_t geteuid(void);
extern int setgid(gid_t);
extern gid_t getgid(void);
extern int setegid(gid_t);
extern gid_t getegid(void);
extern int getgroups(int, gid_t *);
extern int setgroups(size_t, const gid_t *);
extern int setreuid(uid_t, uid_t);
extern int setregid(gid_t, gid_t);
extern int setresuid(uid_t, uid_t, uid_t);
extern int setresgid(gid_t, gid_t, gid_t);
extern int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
extern int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
extern char* getlogin(void);







extern int access(const char*, int);
extern int faccessat(int, const char*, int, int);
extern int link(const char*, const char*);
extern int linkat(int, const char*, int, const char*, int);
extern int unlink(const char*);
extern int unlinkat(int, const char*, int);
extern int chdir(const char *);
extern int fchdir(int);
extern int rmdir(const char *);
extern int pipe(int *);



extern int chroot(const char *);
extern int symlink(const char*, const char*);
extern int symlinkat(const char*, int, const char*);
extern ssize_t readlink(const char*, char*, size_t);
extern ssize_t readlinkat(int, const char*, char*, size_t);
extern int chown(const char *, uid_t, gid_t);
extern int fchown(int, uid_t, gid_t);
extern int fchownat(int, const char*, uid_t, gid_t, int);
extern int lchown(const char *, uid_t, gid_t);
extern int truncate(const char *, off_t);
extern int truncate64(const char *, off64_t);
extern char *getcwd(char *, size_t);

extern int sync(void);

extern int close(int);
extern off_t lseek(int, off_t, int);
extern off64_t lseek64(int, off64_t, int);

extern ssize_t read(int, void *, size_t);
extern ssize_t write(int, const void *, size_t);
extern ssize_t pread(int, void *, size_t, off_t);
extern ssize_t pread64(int, void *, size_t, off64_t);
extern ssize_t pwrite(int, const void *, size_t, off_t);
extern ssize_t pwrite64(int, const void *, size_t, off64_t);

extern int dup(int);
extern int dup2(int, int);



extern int fcntl(int, int, ...);

extern int flock(int, int);
extern int fsync(int);
extern int fdatasync(int);
extern int ftruncate(int, off_t);
extern int ftruncate64(int, off64_t);

extern int pause(void);
extern unsigned int alarm(unsigned int);
extern unsigned int sleep(unsigned int);
extern int usleep(useconds_t);

extern int gethostname(char *, size_t);

extern void *__brk(void *);
extern int brk(void *);
extern void *sbrk(ptrdiff_t);

extern int getopt(int, char * const *, const char *);
extern char *optarg;
extern int optind, opterr, optopt;

extern int isatty(int);
extern char* ttyname(int) ;
extern int ttyname_r(int, char*, size_t);

extern int acct(const char* filepath);

int getpagesize(void);

long sysconf(int);

extern int daemon(int, int);






extern pid_t tcgetpgrp(int fd);
extern int tcsetpgrp(int fd, pid_t _pid);
# 38 "/data/data/com.termux/files/usr/include/fcntl.h" 2 3 4





struct flock64 {
  short l_type;
  short l_whence;
  off64_t l_start;
  off64_t l_len;
  pid_t l_pid;
};
# 62 "/data/data/com.termux/files/usr/include/fcntl.h" 3 4
extern int creat(const char*, mode_t);
extern int creat64(const char*, mode_t);
extern int fallocate64(int, int, off64_t, off64_t);
extern int fallocate(int, int, off_t, off_t);
extern int fcntl(int, int, ...);
extern int openat(int, const char*, int, ...);
extern int openat64(int, const char*, int, ...);
extern int open(const char*, int, ...);
extern int open64(const char*, int, ...);
extern int posix_fadvise64(int, off64_t, off64_t, int);
extern int posix_fadvise(int, off_t, off_t, int);
extern int posix_fallocate64(int, off64_t, off64_t);
extern int posix_fallocate(int, off_t, off_t);
extern ssize_t splice(int, off64_t*, int, off64_t*, size_t, unsigned int);
extern ssize_t tee(int, int, size_t, unsigned int);
extern int unlinkat(int, const char*, int);
extern ssize_t vmsplice(int, const struct iovec*, size_t, unsigned int);
# 3 "capturev4l2.c" 2
# 1 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 1 3 4
# 24 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/ioctl.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/linux/ioctl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/ioctl.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/ioctl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/ioctl.h" 1 3 4
# 20 "/data/data/com.termux/files/usr/include/asm/ioctl.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/linux/ioctl.h" 2 3 4
# 25 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/linux/v4l2-common.h" 1 3 4
# 27 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 1 3 4
# 66 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_power_line_frequency {
 V4L2_CID_POWER_LINE_FREQUENCY_DISABLED = 0,

 V4L2_CID_POWER_LINE_FREQUENCY_50HZ = 1,
 V4L2_CID_POWER_LINE_FREQUENCY_60HZ = 2,
 V4L2_CID_POWER_LINE_FREQUENCY_AUTO = 3,
};
# 82 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_colorfx {

 V4L2_COLORFX_NONE = 0,
 V4L2_COLORFX_BW = 1,
 V4L2_COLORFX_SEPIA = 2,
 V4L2_COLORFX_NEGATIVE = 3,

 V4L2_COLORFX_EMBOSS = 4,
 V4L2_COLORFX_SKETCH = 5,
 V4L2_COLORFX_SKY_BLUE = 6,
 V4L2_COLORFX_GRASS_GREEN = 7,

 V4L2_COLORFX_SKIN_WHITEN = 8,
 V4L2_COLORFX_VIVID = 9,
 V4L2_COLORFX_AQUA = 10,
 V4L2_COLORFX_ART_FREEZE = 11,

 V4L2_COLORFX_SILHOUETTE = 12,
 V4L2_COLORFX_SOLARIZATION = 13,
 V4L2_COLORFX_ANTIQUE = 14,
 V4L2_COLORFX_SET_CBCR = 15,

};
# 131 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_stream_type {
 V4L2_MPEG_STREAM_TYPE_MPEG2_PS = 0,

 V4L2_MPEG_STREAM_TYPE_MPEG2_TS = 1,
 V4L2_MPEG_STREAM_TYPE_MPEG1_SS = 2,
 V4L2_MPEG_STREAM_TYPE_MPEG2_DVD = 3,
 V4L2_MPEG_STREAM_TYPE_MPEG1_VCD = 4,

 V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD = 5,
};
# 150 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_stream_vbi_fmt {
 V4L2_MPEG_STREAM_VBI_FMT_NONE = 0,
 V4L2_MPEG_STREAM_VBI_FMT_IVTV = 1,

};

enum v4l2_mpeg_audio_sampling_freq {
 V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 = 0,

 V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 = 1,
 V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 = 2,
};


enum v4l2_mpeg_audio_encoding {
 V4L2_MPEG_AUDIO_ENCODING_LAYER_1 = 0,
 V4L2_MPEG_AUDIO_ENCODING_LAYER_2 = 1,
 V4L2_MPEG_AUDIO_ENCODING_LAYER_3 = 2,

 V4L2_MPEG_AUDIO_ENCODING_AAC = 3,
 V4L2_MPEG_AUDIO_ENCODING_AC3 = 4,
};


enum v4l2_mpeg_audio_l1_bitrate {
 V4L2_MPEG_AUDIO_L1_BITRATE_32K = 0,
 V4L2_MPEG_AUDIO_L1_BITRATE_64K = 1,
 V4L2_MPEG_AUDIO_L1_BITRATE_96K = 2,

 V4L2_MPEG_AUDIO_L1_BITRATE_128K = 3,
 V4L2_MPEG_AUDIO_L1_BITRATE_160K = 4,
 V4L2_MPEG_AUDIO_L1_BITRATE_192K = 5,
 V4L2_MPEG_AUDIO_L1_BITRATE_224K = 6,

 V4L2_MPEG_AUDIO_L1_BITRATE_256K = 7,
 V4L2_MPEG_AUDIO_L1_BITRATE_288K = 8,
 V4L2_MPEG_AUDIO_L1_BITRATE_320K = 9,
 V4L2_MPEG_AUDIO_L1_BITRATE_352K = 10,

 V4L2_MPEG_AUDIO_L1_BITRATE_384K = 11,
 V4L2_MPEG_AUDIO_L1_BITRATE_416K = 12,
 V4L2_MPEG_AUDIO_L1_BITRATE_448K = 13,
};


enum v4l2_mpeg_audio_l2_bitrate {
 V4L2_MPEG_AUDIO_L2_BITRATE_32K = 0,
 V4L2_MPEG_AUDIO_L2_BITRATE_48K = 1,

 V4L2_MPEG_AUDIO_L2_BITRATE_56K = 2,
 V4L2_MPEG_AUDIO_L2_BITRATE_64K = 3,
 V4L2_MPEG_AUDIO_L2_BITRATE_80K = 4,
 V4L2_MPEG_AUDIO_L2_BITRATE_96K = 5,

 V4L2_MPEG_AUDIO_L2_BITRATE_112K = 6,
 V4L2_MPEG_AUDIO_L2_BITRATE_128K = 7,
 V4L2_MPEG_AUDIO_L2_BITRATE_160K = 8,
 V4L2_MPEG_AUDIO_L2_BITRATE_192K = 9,

 V4L2_MPEG_AUDIO_L2_BITRATE_224K = 10,
 V4L2_MPEG_AUDIO_L2_BITRATE_256K = 11,
 V4L2_MPEG_AUDIO_L2_BITRATE_320K = 12,
 V4L2_MPEG_AUDIO_L2_BITRATE_384K = 13,

};

enum v4l2_mpeg_audio_l3_bitrate {
 V4L2_MPEG_AUDIO_L3_BITRATE_32K = 0,

 V4L2_MPEG_AUDIO_L3_BITRATE_40K = 1,
 V4L2_MPEG_AUDIO_L3_BITRATE_48K = 2,
 V4L2_MPEG_AUDIO_L3_BITRATE_56K = 3,
 V4L2_MPEG_AUDIO_L3_BITRATE_64K = 4,

 V4L2_MPEG_AUDIO_L3_BITRATE_80K = 5,
 V4L2_MPEG_AUDIO_L3_BITRATE_96K = 6,
 V4L2_MPEG_AUDIO_L3_BITRATE_112K = 7,
 V4L2_MPEG_AUDIO_L3_BITRATE_128K = 8,

 V4L2_MPEG_AUDIO_L3_BITRATE_160K = 9,
 V4L2_MPEG_AUDIO_L3_BITRATE_192K = 10,
 V4L2_MPEG_AUDIO_L3_BITRATE_224K = 11,
 V4L2_MPEG_AUDIO_L3_BITRATE_256K = 12,

 V4L2_MPEG_AUDIO_L3_BITRATE_320K = 13,
};

enum v4l2_mpeg_audio_mode {

 V4L2_MPEG_AUDIO_MODE_STEREO = 0,
 V4L2_MPEG_AUDIO_MODE_JOINT_STEREO = 1,
 V4L2_MPEG_AUDIO_MODE_DUAL = 2,
 V4L2_MPEG_AUDIO_MODE_MONO = 3,

};

enum v4l2_mpeg_audio_mode_extension {
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 = 0,

 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 = 1,
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = 2,
 V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = 3,
};


enum v4l2_mpeg_audio_emphasis {
 V4L2_MPEG_AUDIO_EMPHASIS_NONE = 0,
 V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS = 1,

 V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 = 2,
};

enum v4l2_mpeg_audio_crc {

 V4L2_MPEG_AUDIO_CRC_NONE = 0,
 V4L2_MPEG_AUDIO_CRC_CRC16 = 1,
};




enum v4l2_mpeg_audio_ac3_bitrate {
 V4L2_MPEG_AUDIO_AC3_BITRATE_32K = 0,

 V4L2_MPEG_AUDIO_AC3_BITRATE_40K = 1,
 V4L2_MPEG_AUDIO_AC3_BITRATE_48K = 2,
 V4L2_MPEG_AUDIO_AC3_BITRATE_56K = 3,
 V4L2_MPEG_AUDIO_AC3_BITRATE_64K = 4,

 V4L2_MPEG_AUDIO_AC3_BITRATE_80K = 5,
 V4L2_MPEG_AUDIO_AC3_BITRATE_96K = 6,
 V4L2_MPEG_AUDIO_AC3_BITRATE_112K = 7,
 V4L2_MPEG_AUDIO_AC3_BITRATE_128K = 8,

 V4L2_MPEG_AUDIO_AC3_BITRATE_160K = 9,
 V4L2_MPEG_AUDIO_AC3_BITRATE_192K = 10,
 V4L2_MPEG_AUDIO_AC3_BITRATE_224K = 11,
 V4L2_MPEG_AUDIO_AC3_BITRATE_256K = 12,

 V4L2_MPEG_AUDIO_AC3_BITRATE_320K = 13,
 V4L2_MPEG_AUDIO_AC3_BITRATE_384K = 14,
 V4L2_MPEG_AUDIO_AC3_BITRATE_448K = 15,
 V4L2_MPEG_AUDIO_AC3_BITRATE_512K = 16,

 V4L2_MPEG_AUDIO_AC3_BITRATE_576K = 17,
 V4L2_MPEG_AUDIO_AC3_BITRATE_640K = 18,
};


enum v4l2_mpeg_audio_dec_playback {
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO = 0,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO = 1,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT = 2,

 V4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT = 3,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO = 4,
 V4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO = 5,
};



enum v4l2_mpeg_video_encoding {
 V4L2_MPEG_VIDEO_ENCODING_MPEG_1 = 0,

 V4L2_MPEG_VIDEO_ENCODING_MPEG_2 = 1,
 V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC = 2,
};


enum v4l2_mpeg_video_aspect {
 V4L2_MPEG_VIDEO_ASPECT_1x1 = 0,
 V4L2_MPEG_VIDEO_ASPECT_4x3 = 1,
 V4L2_MPEG_VIDEO_ASPECT_16x9 = 2,

 V4L2_MPEG_VIDEO_ASPECT_221x100 = 3,
};






enum v4l2_mpeg_video_bitrate_mode {

 V4L2_MPEG_VIDEO_BITRATE_MODE_VBR = 0,
 V4L2_MPEG_VIDEO_BITRATE_MODE_CBR = 1,
};
# 350 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_header_mode {
 V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE = 0,
 V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME = 1,

};






enum v4l2_mpeg_video_multi_slice_mode {
 V4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE = 0,

 V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB = 1,
 V4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES = 2,
};
# 390 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_h264_entropy_mode {
 V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC = 0,
 V4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC = 1,

};


enum v4l2_mpeg_video_h264_level {

 V4L2_MPEG_VIDEO_H264_LEVEL_1_0 = 0,
 V4L2_MPEG_VIDEO_H264_LEVEL_1B = 1,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_1 = 2,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_2 = 3,

 V4L2_MPEG_VIDEO_H264_LEVEL_1_3 = 4,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_0 = 5,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_1 = 6,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_2 = 7,

 V4L2_MPEG_VIDEO_H264_LEVEL_3_0 = 8,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_1 = 9,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_2 = 10,
 V4L2_MPEG_VIDEO_H264_LEVEL_4_0 = 11,

 V4L2_MPEG_VIDEO_H264_LEVEL_4_1 = 12,
 V4L2_MPEG_VIDEO_H264_LEVEL_4_2 = 13,
 V4L2_MPEG_VIDEO_H264_LEVEL_5_0 = 14,
 V4L2_MPEG_VIDEO_H264_LEVEL_5_1 = 15,

};




enum v4l2_mpeg_video_h264_loop_filter_mode {
 V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED = 0,
 V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED = 1,
 V4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY = 2,

};

enum v4l2_mpeg_video_h264_profile {
 V4L2_MPEG_VIDEO_H264_PROFILE_BASELINE = 0,

 V4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE = 1,
 V4L2_MPEG_VIDEO_H264_PROFILE_MAIN = 2,
 V4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED = 3,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH = 4,

 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10 = 5,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422 = 6,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE = 7,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA = 8,

 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA = 9,
 V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA = 10,
 V4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA = 11,
 V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE = 12,

 V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH = 13,
 V4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA = 14,
 V4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH = 15,
 V4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH = 16,

};





enum v4l2_mpeg_video_h264_vui_sar_idc {
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED = 0,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1 = 1,

 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11 = 2,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11 = 3,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11 = 4,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33 = 5,

 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11 = 6,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11 = 7,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11 = 8,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33 = 9,

 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11 = 10,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11 = 11,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33 = 12,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99 = 13,

 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3 = 14,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2 = 15,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1 = 16,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED = 17,

};




enum v4l2_mpeg_video_h264_sei_fp_arrangement_type {
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD = 0,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN = 1,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW = 2,

 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE = 3,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM = 4,
 V4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL = 5,
};



enum v4l2_mpeg_video_h264_fmo_map_type {
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES = 0,

 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES = 1,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER = 2,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT = 3,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN = 4,

 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN = 5,
 V4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT = 6,
};



enum v4l2_mpeg_video_h264_fmo_change_dir {
 V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT = 0,
 V4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT = 1,

};







enum v4l2_mpeg_video_h264_hierarchical_coding_type {

 V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B = 0,
 V4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P = 1,
};
# 542 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_video_mpeg4_level {

 V4L2_MPEG_VIDEO_MPEG4_LEVEL_0 = 0,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B = 1,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_1 = 2,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_2 = 3,

 V4L2_MPEG_VIDEO_MPEG4_LEVEL_3 = 4,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B = 5,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_4 = 6,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_5 = 7,

};

enum v4l2_mpeg_video_mpeg4_profile {
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE = 0,

 V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE = 1,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE = 2,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE = 3,
 V4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY = 4,

};


enum v4l2_vp8_num_partitions {

 V4L2_CID_MPEG_VIDEO_VPX_1_PARTITION = 0,
 V4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS = 1,
 V4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS = 2,
 V4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS = 3,

};


enum v4l2_vp8_num_ref_frames {

 V4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME = 0,
 V4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME = 1,
 V4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME = 2,
};






enum v4l2_vp8_golden_frame_sel {
 V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV = 0,
 V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD = 1,
};
# 602 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_cx2341x_video_spatial_filter_mode {

 V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL = 0,
 V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO = 1,
};



enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type {
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF = 0,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR = 1,

 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT = 2,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE = 3,
 V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE = 4,
};


enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type {
 V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF = 0,
 V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR = 1,

};

enum v4l2_mpeg_cx2341x_video_temporal_filter_mode {
 V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = 0,

 V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO = 1,
};



enum v4l2_mpeg_cx2341x_video_median_filter_type {
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF = 0,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR = 1,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT = 2,

 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = 3,
 V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG = 4,
};
# 654 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_mpeg_mfc51_video_frame_skip_mode {
 V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED = 0,
 V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT = 1,
 V4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT = 2,

};

enum v4l2_mpeg_mfc51_video_force_frame_type {
 V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED = 0,

 V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME = 1,
 V4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED = 2,
};
# 682 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_exposure_auto_type {

 V4L2_EXPOSURE_AUTO = 0,
 V4L2_EXPOSURE_MANUAL = 1,
 V4L2_EXPOSURE_SHUTTER_PRIORITY = 2,
 V4L2_EXPOSURE_APERTURE_PRIORITY = 3

};
# 714 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_auto_n_preset_white_balance {
 V4L2_WHITE_BALANCE_MANUAL = 0,
 V4L2_WHITE_BALANCE_AUTO = 1,
 V4L2_WHITE_BALANCE_INCANDESCENT = 2,

 V4L2_WHITE_BALANCE_FLUORESCENT = 3,
 V4L2_WHITE_BALANCE_FLUORESCENT_H = 4,
 V4L2_WHITE_BALANCE_HORIZON = 5,
 V4L2_WHITE_BALANCE_DAYLIGHT = 6,

 V4L2_WHITE_BALANCE_FLASH = 7,
 V4L2_WHITE_BALANCE_CLOUDY = 8,
 V4L2_WHITE_BALANCE_SHADE = 9,
};






enum v4l2_iso_sensitivity_auto_type {
 V4L2_ISO_SENSITIVITY_MANUAL = 0,
 V4L2_ISO_SENSITIVITY_AUTO = 1,
};


enum v4l2_exposure_metering {
 V4L2_EXPOSURE_METERING_AVERAGE = 0,
 V4L2_EXPOSURE_METERING_CENTER_WEIGHTED = 1,

 V4L2_EXPOSURE_METERING_SPOT = 2,
 V4L2_EXPOSURE_METERING_MATRIX = 3,
};


enum v4l2_scene_mode {
 V4L2_SCENE_MODE_NONE = 0,
 V4L2_SCENE_MODE_BACKLIGHT = 1,
 V4L2_SCENE_MODE_BEACH_SNOW = 2,

 V4L2_SCENE_MODE_CANDLE_LIGHT = 3,
 V4L2_SCENE_MODE_DAWN_DUSK = 4,
 V4L2_SCENE_MODE_FALL_COLORS = 5,
 V4L2_SCENE_MODE_FIREWORKS = 6,

 V4L2_SCENE_MODE_LANDSCAPE = 7,
 V4L2_SCENE_MODE_NIGHT = 8,
 V4L2_SCENE_MODE_PARTY_INDOOR = 9,
 V4L2_SCENE_MODE_PORTRAIT = 10,

 V4L2_SCENE_MODE_SPORTS = 11,
 V4L2_SCENE_MODE_SUNSET = 12,
 V4L2_SCENE_MODE_TEXT = 13,
};
# 784 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_auto_focus_range {
 V4L2_AUTO_FOCUS_RANGE_AUTO = 0,
 V4L2_AUTO_FOCUS_RANGE_NORMAL = 1,
 V4L2_AUTO_FOCUS_RANGE_MACRO = 2,

 V4L2_AUTO_FOCUS_RANGE_INFINITY = 3,
};
# 815 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_preemphasis {
 V4L2_PREEMPHASIS_DISABLED = 0,
 V4L2_PREEMPHASIS_50_uS = 1,

 V4L2_PREEMPHASIS_75_uS = 2,
};






enum v4l2_flash_led_mode {

 V4L2_FLASH_LED_MODE_NONE,
 V4L2_FLASH_LED_MODE_FLASH,
 V4L2_FLASH_LED_MODE_TORCH,
};


enum v4l2_flash_strobe_source {
 V4L2_FLASH_STROBE_SOURCE_SOFTWARE,
 V4L2_FLASH_STROBE_SOURCE_EXTERNAL,

};
# 864 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_jpeg_chroma_subsampling {
 V4L2_JPEG_CHROMA_SUBSAMPLING_444 = 0,
 V4L2_JPEG_CHROMA_SUBSAMPLING_422 = 1,
 V4L2_JPEG_CHROMA_SUBSAMPLING_420 = 2,

 V4L2_JPEG_CHROMA_SUBSAMPLING_411 = 3,
 V4L2_JPEG_CHROMA_SUBSAMPLING_410 = 4,
 V4L2_JPEG_CHROMA_SUBSAMPLING_GRAY = 5,
};
# 904 "/data/data/com.termux/files/usr/include/linux/v4l2-controls.h" 3 4
enum v4l2_dv_tx_mode {
 V4L2_DV_TX_MODE_DVI_D = 0,
 V4L2_DV_TX_MODE_HDMI = 1,
};


enum v4l2_dv_rgb_range {
 V4L2_DV_RGB_RANGE_AUTO = 0,
 V4L2_DV_RGB_RANGE_LIMITED = 1,

 V4L2_DV_RGB_RANGE_FULL = 2,
};






enum v4l2_deemphasis {

 V4L2_DEEMPHASIS_DISABLED = V4L2_PREEMPHASIS_DISABLED,
 V4L2_DEEMPHASIS_50_uS = V4L2_PREEMPHASIS_50_uS,
 V4L2_DEEMPHASIS_75_uS = V4L2_PREEMPHASIS_75_uS,
};
# 28 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 2 3 4




enum v4l2_field {

 V4L2_FIELD_ANY = 0,
 V4L2_FIELD_NONE = 1,
 V4L2_FIELD_TOP = 2,
 V4L2_FIELD_BOTTOM = 3,

 V4L2_FIELD_INTERLACED = 4,
 V4L2_FIELD_SEQ_TB = 5,
 V4L2_FIELD_SEQ_BT = 6,
 V4L2_FIELD_ALTERNATE = 7,

 V4L2_FIELD_INTERLACED_TB = 8,
 V4L2_FIELD_INTERLACED_BT = 9,
};




enum v4l2_buf_type {
 V4L2_BUF_TYPE_VIDEO_CAPTURE = 1,

 V4L2_BUF_TYPE_VIDEO_OUTPUT = 2,
 V4L2_BUF_TYPE_VIDEO_OVERLAY = 3,
 V4L2_BUF_TYPE_VBI_CAPTURE = 4,
 V4L2_BUF_TYPE_VBI_OUTPUT = 5,

 V4L2_BUF_TYPE_SLICED_VBI_CAPTURE = 6,
 V4L2_BUF_TYPE_SLICED_VBI_OUTPUT = 7,
 V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = 8,
 V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE = 9,

 V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE = 10,
 V4L2_BUF_TYPE_PRIVATE = 0x80,
};



enum v4l2_tuner_type {
 V4L2_TUNER_RADIO = 1,
 V4L2_TUNER_ANALOG_TV = 2,

 V4L2_TUNER_DIGITAL_TV = 3,
};
enum v4l2_memory {
 V4L2_MEMORY_MMAP = 1,

 V4L2_MEMORY_USERPTR = 2,
 V4L2_MEMORY_OVERLAY = 3,
 V4L2_MEMORY_DMABUF = 4,
};

enum v4l2_colorspace {
 V4L2_COLORSPACE_SMPTE170M = 1,
 V4L2_COLORSPACE_SMPTE240M = 2,
 V4L2_COLORSPACE_REC709 = 3,

 V4L2_COLORSPACE_BT878 = 4,
 V4L2_COLORSPACE_470_SYSTEM_M = 5,
 V4L2_COLORSPACE_470_SYSTEM_BG = 6,
 V4L2_COLORSPACE_JPEG = 7,

 V4L2_COLORSPACE_SRGB = 8,
};
enum v4l2_priority {
 V4L2_PRIORITY_UNSET = 0,

 V4L2_PRIORITY_BACKGROUND = 1,
 V4L2_PRIORITY_INTERACTIVE = 2,
 V4L2_PRIORITY_RECORD = 3,
 V4L2_PRIORITY_DEFAULT = V4L2_PRIORITY_INTERACTIVE,

};
struct v4l2_rect {
 __s32 left;
 __s32 top;

 __u32 width;
 __u32 height;
};
struct v4l2_fract {

 __u32 numerator;
 __u32 denominator;
};
struct v4l2_capability {

 __u8 driver[16];
 __u8 card[32];
 __u8 bus_info[32];
 __u32 version;

 __u32 capabilities;
 __u32 device_caps;
 __u32 reserved[3];
};
# 157 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_pix_format {

 __u32 width;
 __u32 height;
 __u32 pixelformat;
 __u32 field;

 __u32 bytesperline;
 __u32 sizeimage;
 __u32 colorspace;
 __u32 priv;

};
# 314 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_fmtdesc {
 __u32 index;
 __u32 type;
 __u32 flags;

 __u8 description[32];
 __u32 pixelformat;
 __u32 reserved[4];
};



enum v4l2_frmsizetypes {
 V4L2_FRMSIZE_TYPE_DISCRETE = 1,

 V4L2_FRMSIZE_TYPE_CONTINUOUS = 2,
 V4L2_FRMSIZE_TYPE_STEPWISE = 3,
};
struct v4l2_frmsize_discrete {

 __u32 width;
 __u32 height;
};
struct v4l2_frmsize_stepwise {

 __u32 min_width;
 __u32 max_width;
 __u32 step_width;
 __u32 min_height;

 __u32 max_height;
 __u32 step_height;
};
struct v4l2_frmsizeenum {

 __u32 index;
 __u32 pixel_format;
 __u32 type;
 union {

 struct v4l2_frmsize_discrete discrete;
 struct v4l2_frmsize_stepwise stepwise;
 };
 __u32 reserved[2];

};
enum v4l2_frmivaltypes {
 V4L2_FRMIVAL_TYPE_DISCRETE = 1,
 V4L2_FRMIVAL_TYPE_CONTINUOUS = 2,

 V4L2_FRMIVAL_TYPE_STEPWISE = 3,
};
struct v4l2_frmival_stepwise {
 struct v4l2_fract min;

 struct v4l2_fract max;
 struct v4l2_fract step;
};
struct v4l2_frmivalenum {

 __u32 index;
 __u32 pixel_format;
 __u32 width;
 __u32 height;

 __u32 type;
 union {
 struct v4l2_fract discrete;
 struct v4l2_frmival_stepwise stepwise;

 };
 __u32 reserved[2];
};
struct v4l2_timecode {

 __u32 type;
 __u32 flags;
 __u8 frames;
 __u8 seconds;

 __u8 minutes;
 __u8 hours;
 __u8 userbits[4];
};
# 411 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_jpegcompression {
 int quality;

 int APPn;
 int APP_len;
 char APP_data[60];
 int COM_len;

 char COM_data[60];
 __u32 jpeg_markers;






};

struct v4l2_requestbuffers {
 __u32 count;
 __u32 type;
 __u32 memory;

 __u32 reserved[2];
};
struct v4l2_plane {
 __u32 bytesused;

 __u32 length;
 union {
 __u32 mem_offset;
 unsigned long userptr;

 __s32 fd;
 } m;
 __u32 data_offset;
 __u32 reserved[11];

};
struct v4l2_buffer {
 __u32 index;
 __u32 type;

 __u32 bytesused;
 __u32 flags;
 __u32 field;
 struct timeval timestamp;

 struct v4l2_timecode timecode;
 __u32 sequence;
 __u32 memory;
 union {

 __u32 offset;
 unsigned long userptr;
 struct v4l2_plane *planes;
 __s32 fd;

 } m;
 __u32 length;
 __u32 reserved2;
 __u32 reserved;

};
# 494 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_exportbuffer {
 __u32 type;
 __u32 index;
 __u32 plane;

 __u32 flags;
 __s32 fd;
 __u32 reserved[11];
};

struct v4l2_framebuffer {
 __u32 capability;
 __u32 flags;
 void *base;

 struct v4l2_pix_format fmt;
};
# 530 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_clip {
 struct v4l2_rect c;
 struct v4l2_clip *next;

};
struct v4l2_window {
 struct v4l2_rect w;
 __u32 field;

 __u32 chromakey;
 struct v4l2_clip *clips;
 __u32 clipcount;
 void *bitmap;

 __u8 global_alpha;
};
struct v4l2_captureparm {
 __u32 capability;

 __u32 capturemode;
 struct v4l2_fract timeperframe;
 __u32 extendedmode;
 __u32 readbuffers;

 __u32 reserved[4];
};



struct v4l2_outputparm {
 __u32 capability;
 __u32 outputmode;
 struct v4l2_fract timeperframe;

 __u32 extendedmode;
 __u32 writebuffers;
 __u32 reserved[4];
};

struct v4l2_cropcap {
 __u32 type;
 struct v4l2_rect bounds;
 struct v4l2_rect defrect;

 struct v4l2_fract pixelaspect;
};
struct v4l2_crop {
 __u32 type;

 struct v4l2_rect c;
};
struct v4l2_selection {
 __u32 type;

 __u32 target;
 __u32 flags;
 struct v4l2_rect r;
 __u32 reserved[9];

};
typedef __u64 v4l2_std_id;
# 649 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_standard {
 __u32 index;
 v4l2_std_id id;
 __u8 name[24];

 struct v4l2_fract frameperiod;
 __u32 framelines;
 __u32 reserved[4];
};

struct v4l2_bt_timings {
 __u32 width;
 __u32 height;
 __u32 interlaced;

 __u32 polarities;
 __u64 pixelclock;
 __u32 hfrontporch;
 __u32 hsync;

 __u32 hbackporch;
 __u32 vfrontporch;
 __u32 vsync;
 __u32 vbackporch;

 __u32 il_vfrontporch;
 __u32 il_vsync;
 __u32 il_vbackporch;
 __u32 standards;

 __u32 flags;
 __u32 reserved[14];
} __attribute__ ((packed));
# 702 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_dv_timings {

 __u32 type;
 union {
 struct v4l2_bt_timings bt;
 __u32 reserved[32];

 };
} __attribute__ ((packed));

struct v4l2_enum_dv_timings {

 __u32 index;
 __u32 reserved[3];
 struct v4l2_dv_timings timings;
};

struct v4l2_bt_timings_cap {
 __u32 min_width;
 __u32 max_width;
 __u32 min_height;

 __u32 max_height;
 __u64 min_pixelclock;
 __u64 max_pixelclock;
 __u32 standards;

 __u32 capabilities;
 __u32 reserved[16];
} __attribute__ ((packed));





struct v4l2_dv_timings_cap {

 __u32 type;
 __u32 reserved[3];
 union {
 struct v4l2_bt_timings_cap bt;

 __u32 raw_data[32];
 };
};
struct v4l2_input {

 __u32 index;
 __u8 name[32];
 __u32 type;
 __u32 audioset;

 __u32 tuner;
 v4l2_std_id std;
 __u32 status;
 __u32 capabilities;

 __u32 reserved[3];
};
# 784 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_output {
 __u32 index;
 __u8 name[32];
 __u32 type;

 __u32 audioset;
 __u32 modulator;
 v4l2_std_id std;
 __u32 capabilities;

 __u32 reserved[3];
};
# 804 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_control {
 __u32 id;
 __s32 value;
};

struct v4l2_ext_control {
 __u32 id;
 __u32 size;
 __u32 reserved2[1];

 union {
 __s32 value;
 __s64 value64;
 char *string;

 };
} __attribute__ ((packed));
struct v4l2_ext_controls {
 __u32 ctrl_class;

 __u32 count;
 __u32 error_idx;
 __u32 reserved[2];
 struct v4l2_ext_control *controls;

};




enum v4l2_ctrl_type {
 V4L2_CTRL_TYPE_INTEGER = 1,
 V4L2_CTRL_TYPE_BOOLEAN = 2,
 V4L2_CTRL_TYPE_MENU = 3,

 V4L2_CTRL_TYPE_BUTTON = 4,
 V4L2_CTRL_TYPE_INTEGER64 = 5,
 V4L2_CTRL_TYPE_CTRL_CLASS = 6,
 V4L2_CTRL_TYPE_STRING = 7,

 V4L2_CTRL_TYPE_BITMASK = 8,
 V4L2_CTRL_TYPE_INTEGER_MENU = 9,
};
struct v4l2_queryctrl {

 __u32 id;
 __u32 type;
 __u8 name[32];
 __s32 minimum;

 __s32 maximum;
 __s32 step;
 __s32 default_value;
 __u32 flags;

 __u32 reserved[2];
};
struct v4l2_querymenu {
 __u32 id;

 __u32 index;
 union {
 __u8 name[32];
 __s64 value;

 };
 __u32 reserved;
} __attribute__ ((packed));
# 886 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_tuner {
 __u32 index;

 __u8 name[32];
 __u32 type;
 __u32 capability;
 __u32 rangelow;

 __u32 rangehigh;
 __u32 rxsubchans;
 __u32 audmode;
 __s32 signal;

 __s32 afc;
 __u32 reserved[4];
};
struct v4l2_modulator {

 __u32 index;
 __u8 name[32];
 __u32 capability;
 __u32 rangelow;

 __u32 rangehigh;
 __u32 txsubchans;
 __u32 reserved[4];
};
# 945 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_frequency {
 __u32 tuner;
 __u32 type;

 __u32 frequency;
 __u32 reserved[8];
};




struct v4l2_frequency_band {
 __u32 tuner;

 __u32 type;
 __u32 index;
 __u32 capability;
 __u32 rangelow;

 __u32 rangehigh;
 __u32 modulation;
 __u32 reserved[9];
};

struct v4l2_hw_freq_seek {
 __u32 tuner;
 __u32 type;
 __u32 seek_upward;

 __u32 wrap_around;
 __u32 spacing;
 __u32 rangelow;
 __u32 rangehigh;

 __u32 reserved[5];
};
struct v4l2_rds_data {
 __u8 lsb;

 __u8 msb;
 __u8 block;
} __attribute__ ((packed));
# 999 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_audio {
 __u32 index;
 __u8 name[32];
 __u32 capability;

 __u32 mode;
 __u32 reserved[2];
};




struct v4l2_audioout {
 __u32 index;

 __u8 name[32];
 __u32 capability;
 __u32 mode;
 __u32 reserved[2];

};





struct v4l2_enc_idx_entry {
 __u64 offset;
 __u64 pts;

 __u32 length;
 __u32 flags;
 __u32 reserved[2];
};


struct v4l2_enc_idx {
 __u32 entries;
 __u32 entries_cap;

 __u32 reserved[4];
 struct v4l2_enc_idx_entry entry[(64)];
};







struct v4l2_encoder_cmd {
 __u32 cmd;
 __u32 flags;
 union {

 struct {
 __u32 data[8];
 } raw;
 };

};
# 1072 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_decoder_cmd {

 __u32 cmd;
 __u32 flags;
 union {
 struct {

 __u64 pts;
 } stop;
 struct {
 __s32 speed;

 __u32 format;
 } start;
 struct {
 __u32 data[16];

 } raw;
 };
};
struct v4l2_vbi_format {

 __u32 sampling_rate;
 __u32 offset;
 __u32 samples_per_line;
 __u32 sample_format;

 __s32 start[2];
 __u32 count[2];
 __u32 flags;
 __u32 reserved[2];

};


struct v4l2_sliced_vbi_format {

 __u16 service_set;
 __u16 service_lines[2][24];
 __u32 io_size;
 __u32 reserved[2];

};







struct v4l2_sliced_vbi_cap {

 __u16 service_set;
 __u16 service_lines[2][24];
 __u32 type;
 __u32 reserved[3];

};
struct v4l2_sliced_vbi_data {
 __u32 id;
 __u32 field;

 __u32 line;
 __u32 reserved;
 __u8 data[48];
};






struct v4l2_mpeg_vbi_itv0_line {
 __u8 id;
 __u8 data[42];
} __attribute__ ((packed));

struct v4l2_mpeg_vbi_itv0 {
 __le32 linemask[2];
 struct v4l2_mpeg_vbi_itv0_line line[35];
} __attribute__ ((packed));

struct v4l2_mpeg_vbi_ITV0 {
 struct v4l2_mpeg_vbi_itv0_line line[36];
} __attribute__ ((packed));



struct v4l2_mpeg_vbi_fmt_ivtv {
 __u8 magic[4];
 union {

 struct v4l2_mpeg_vbi_itv0 itv0;
 struct v4l2_mpeg_vbi_ITV0 ITV0;
 };
} __attribute__ ((packed));

struct v4l2_plane_pix_format {
 __u32 sizeimage;
 __u16 bytesperline;
 __u16 reserved[7];

} __attribute__ ((packed));
struct v4l2_pix_format_mplane {
 __u32 width;
 __u32 height;

 __u32 pixelformat;
 __u32 field;
 __u32 colorspace;
 struct v4l2_plane_pix_format plane_fmt[8];

 __u8 num_planes;
 __u8 reserved[11];
} __attribute__ ((packed));
struct v4l2_format {

 __u32 type;
 union {
 struct v4l2_pix_format pix;
 struct v4l2_pix_format_mplane pix_mp;

 struct v4l2_window win;
 struct v4l2_vbi_format vbi;
 struct v4l2_sliced_vbi_format sliced;
 __u8 raw_data[200];

 } fmt;
};
struct v4l2_streamparm {
 __u32 type;

 union {
 struct v4l2_captureparm capture;
 struct v4l2_outputparm output;
 __u8 raw_data[200];

 } parm;
};
# 1219 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_event_vsync {
 __u8 field;
} __attribute__ ((packed));




struct v4l2_event_ctrl {
 __u32 changes;

 __u32 type;
 union {
 __s32 value;
 __s64 value64;

 };
 __u32 flags;
 __s32 minimum;
 __s32 maximum;

 __s32 step;
 __s32 default_value;
};
struct v4l2_event_frame_sync {

 __u32 frame_sequence;
};
struct v4l2_event {
 __u32 type;

 union {
 struct v4l2_event_vsync vsync;
 struct v4l2_event_ctrl ctrl;
 struct v4l2_event_frame_sync frame_sync;

 __u8 data[64];
 } u;
 __u32 pending;
 __u32 sequence;

 struct timespec timestamp;
 __u32 id;
 __u32 reserved[8];
};



struct v4l2_event_subscription {
 __u32 type;

 __u32 id;
 __u32 flags;
 __u32 reserved[5];
};
# 1281 "/data/data/com.termux/files/usr/include/linux/videodev2.h" 3 4
struct v4l2_dbg_match {
 __u32 type;

 union {
 __u32 addr;
 char name[32];
 };

} __attribute__ ((packed));
struct v4l2_dbg_register {
 struct v4l2_dbg_match match;
 __u32 size;

 __u64 reg;
 __u64 val;
} __attribute__ ((packed));



struct v4l2_dbg_chip_info {
 struct v4l2_dbg_match match;
 char name[32];

 __u32 flags;
 __u32 reserved[32];
} __attribute__ ((packed));
struct v4l2_create_buffers {

 __u32 index;
 __u32 count;
 __u32 memory;
 struct v4l2_format format;

 __u32 reserved[8];
};
# 4 "capturev4l2.c" 2

# 1 "/data/data/com.termux/files/usr/include/stdio.h" 1 3 4
# 52 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stdarg.h" 1 3 4
# 30 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 50 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 53 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 54 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4



# 1 "/data/data/com.termux/files/usr/include/stdlib.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/stdlib.h" 3 4
# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 34 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4

# 1 "/data/data/com.termux/files/usr/include/alloca.h" 1 3 4
# 36 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/strings.h" 1 3 4
# 56 "/data/data/com.termux/files/usr/include/strings.h" 3 4
int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
# 37 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/memory.h" 1 3 4
# 38 "/data/data/com.termux/files/usr/include/stdlib.h" 2 3 4






extern __attribute__((__noreturn__)) void abort(void);
extern __attribute__((__noreturn__)) void exit(int);
extern __attribute__((__noreturn__)) void _Exit(int);
extern int atexit(void (*)(void));






extern char* getenv(const char*);
extern int putenv(char*);
extern int setenv(const char*, const char*, int);
extern int unsetenv(const char*);
extern int clearenv(void);

extern char* mkdtemp(char*);
extern char* mktemp(char*) ;
extern int mkstemp(char*);
extern int mkstemp64(char*);

extern long strtol(const char *, char **, int);
extern long long strtoll(const char *, char **, int);
extern unsigned long strtoul(const char *, char **, int);
extern unsigned long long strtoull(const char *, char **, int);

extern int posix_memalign(void **memptr, size_t alignment, size_t size);

extern double atof(const char*) ;

extern double strtod(const char*, char**) __attribute__((visibility ("default"))) ;
extern float strtof(const char*, char**) __attribute__((visibility ("default"))) ;
extern long double strtold(const char*, char**) __attribute__((visibility ("default"))) ;

extern long double strtold_l(const char *, char **, locale_t) __attribute__((visibility ("default"))) ;
extern long long strtoll_l(const char *, char **, int, locale_t) __attribute__((visibility ("default")));
extern unsigned long long strtoull_l(const char *, char **, int, locale_t) __attribute__((visibility ("default")));

extern int atoi(const char*) __attribute__((pure));
extern long atol(const char*) __attribute__((pure));
extern long long atoll(const char*) __attribute__((pure));

extern int abs(int) __attribute__((__const__));
extern long labs(long) __attribute__((__const__));
extern long long llabs(long long) __attribute__((__const__));

extern char * realpath(const char *path, char *resolved);
extern int system(const char * string);

extern void * bsearch(const void *key, const void *base0,
 size_t nmemb, size_t size,
 int (*compar)(const void *, const void *));

extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));

extern long jrand48(unsigned short *);
extern long mrand48(void);
extern long nrand48(unsigned short *);
extern long lrand48(void);
extern unsigned short *seed48(unsigned short*);
extern double erand48(unsigned short xsubi[3]) ;
extern double drand48(void) ;
extern void srand48(long);

unsigned int arc4random(void);
unsigned int arc4random_uniform(unsigned int);
void arc4random_buf(void*, size_t);



int rand(void);
int rand_r(unsigned int*);
void srand(unsigned int);

char* initstate(unsigned int, char*, size_t);
long random(void);
char* setstate(char*);
void srandom(unsigned int);

int getpt(void);
int grantpt(int);
int posix_openpt(int);
char* ptsname(int) ;
int ptsname_r(int, char*, size_t);
int unlockpt(int);

typedef struct {
    int quot;
    int rem;
} div_t;

extern div_t div(int, int) __attribute__((__const__));

typedef struct {
    long int quot;
    long int rem;
} ldiv_t;

extern ldiv_t ldiv(long, long) __attribute__((__const__));

typedef struct {
    long long int quot;
    long long int rem;
} lldiv_t;

extern lldiv_t lldiv(long long, long long) __attribute__((__const__));


extern const char* getprogname(void);
extern void setprogname(const char*);


extern int mblen(const char *, size_t);
extern size_t mbstowcs(wchar_t *, const char *, size_t);
extern int mbtowc(wchar_t *, const char *, size_t);


extern int wctomb(char *, wchar_t);
extern size_t wcstombs(char *, const wchar_t *, size_t);
# 58 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4


# 1 "/system/comma/usr/bin/../lib/clang/4.0.0/include/stddef.h" 1 3 4
# 61 "/data/data/com.termux/files/usr/include/stdio.h" 2 3 4



typedef off_t fpos_t;
# 74 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
struct __sbuf {
  unsigned char* _base;
  size_t _size;
};
# 112 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;

 int _flags;
 int _file;




 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read)(void *, char *, int);
 fpos_t (*_seek)(void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ext;

 unsigned char *_up;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;


extern FILE __sF[];
# 224 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
char *fgets(char * __restrict, int, FILE * __restrict);
FILE *fopen(const char * __restrict , const char * __restrict);
int fprintf(FILE * __restrict , const char * __restrict, ...)
  __attribute__((__format__(printf, 2, 3))) __attribute__((__nonnull__ (2)));
int fputc(int, FILE *);
int fputs(const char * __restrict, FILE * __restrict);
size_t fread(void * __restrict, size_t, size_t, FILE * __restrict);
FILE *freopen(const char * __restrict, const char * __restrict,
     FILE * __restrict);
int fscanf(FILE * __restrict, const char * __restrict, ...)
  __attribute__((__format__(scanf, 2, 3))) __attribute__((__nonnull__ (2)));
int fseek(FILE *, long, int);
long ftell(FILE *);
size_t fwrite(const void * __restrict, size_t, size_t, FILE * __restrict);
int getc(FILE *);
int getchar(void);
ssize_t getdelim(char ** __restrict, size_t * __restrict, int,
     FILE * __restrict);
ssize_t getline(char ** __restrict, size_t * __restrict, FILE * __restrict);

void perror(const char *);
int printf(const char * __restrict, ...)
  __attribute__((__format__(printf, 1, 2))) __attribute__((__nonnull__ (1)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
void rewind(FILE *);
int scanf(const char * __restrict, ...)
  __attribute__((__format__(scanf, 1, 2))) __attribute__((__nonnull__ (1)));
void setbuf(FILE * __restrict, char * __restrict);
int setvbuf(FILE * __restrict, char * __restrict, int, size_t);
int sscanf(const char * __restrict, const char * __restrict, ...)
  __attribute__((__format__(scanf, 2, 3))) __attribute__((__nonnull__ (2)));
int ungetc(int, FILE *);
int vfprintf(FILE * __restrict, const char * __restrict, __va_list)
  __attribute__((__format__(printf, 2, 0))) __attribute__((__nonnull__ (2)));
int vprintf(const char * __restrict, __va_list)
  __attribute__((__format__(printf, 1, 0))) __attribute__((__nonnull__ (1)));

int dprintf(int, const char * __restrict, ...) __attribute__((__format__(printf, 2, 3))) __attribute__((__nonnull__ (2)));
int vdprintf(int, const char * __restrict, __va_list) __attribute__((__format__(printf, 2, 0))) __attribute__((__nonnull__ (2)));





int sprintf(char* __restrict, const char* __restrict, ...)
    __attribute__((__format__(printf, 2, 3))) __attribute__((__nonnull__ (2)));
char* tmpnam(char*) ;
int vsprintf(char* __restrict, const char* __restrict, __va_list)
    __attribute__((__format__(printf, 2, 0))) __attribute__((__nonnull__ (2)));

char* tempnam(const char*, const char*)
                                                                        ;



extern int rename(const char*, const char*);
extern int renameat(int, const char*, int, const char*);

int fgetpos(FILE * __restrict, fpos_t * __restrict);
int fsetpos(FILE *, const fpos_t *);

int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);


int snprintf(char * __restrict, size_t, const char * __restrict, ...)
  __attribute__((__format__(printf, 3, 4))) __attribute__((__nonnull__ (3)));
int vfscanf(FILE * __restrict, const char * __restrict, __va_list)
  __attribute__((__format__(scanf, 2, 0))) __attribute__((__nonnull__ (2)));
int vscanf(const char *, __va_list)
  __attribute__((__format__(scanf, 1, 0))) __attribute__((__nonnull__ (1)));
int vsnprintf(char * __restrict, size_t, const char * __restrict, __va_list)
  __attribute__((__format__(printf, 3, 0))) __attribute__((__nonnull__ (3)));
int vsscanf(const char * __restrict, const char * __restrict, __va_list)
  __attribute__((__format__(scanf, 2, 0))) __attribute__((__nonnull__ (2)));
# 320 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
FILE *fdopen(int, const char *);
int fileno(FILE *);


int pclose(FILE *);
FILE *popen(const char *, const char *);



void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);





int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);
# 352 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
int asprintf(char ** __restrict, const char * __restrict, ...)
  __attribute__((__format__(printf, 2, 3))) __attribute__((__nonnull__ (2)));
char *fgetln(FILE * __restrict, size_t * __restrict);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** __restrict, const char * __restrict,
    __va_list)
  __attribute__((__format__(printf, 2, 0))) __attribute__((__nonnull__ (2)));






FILE *funopen(const void *,
  int (*)(void *, char *, int),
  int (*)(void *, const char *, int),
  fpos_t (*)(void *, fpos_t, int),
  int (*)(void *));
# 381 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
static char* ctermid(char* s) {
    if (s == 0) return (char*) "/dev/tty";
    strcpy(s, "/dev/tty");
    return s;
}
# 480 "/data/data/com.termux/files/usr/include/stdio.h" 3 4
extern int open(const char*, int, ...);
extern pid_t getpid();
extern int unlink(const char*);
static FILE* tmpfile() {
 int p = getpid();
 char* path;
 int i;
 for (i = 0; i < 100; i++) {
  unsigned int r = arc4random();
  if (asprintf(&path, "/data/data/com.termux/files/usr/tmp/tmpfile.%d-%u", p, r) == -1) return ((void*)0);
  int fd = open(path, 00000002 | 00000100 | 00000200 | 0400000, 0600);
  free(path);
  if (fd >= 0) {
   FILE* result = fdopen(fd, "w+");
   unlink(path);
   return result;
  }
 }
 return ((void*)0);
}
# 6 "capturev4l2.c" 2

# 1 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 1 3 4
# 37 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/termios.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/linux/termios.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/termios.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/termios.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/termios.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/asm-generic/termios.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/termbits.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/termbits.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/termbits.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm-generic/termbits.h" 3 4
typedef unsigned char cc_t;

typedef unsigned int speed_t;
typedef unsigned int tcflag_t;

struct termios {

 tcflag_t c_iflag;
 tcflag_t c_oflag;
 tcflag_t c_cflag;
 tcflag_t c_lflag;

 cc_t c_line;
 cc_t c_cc[19];
};
struct termios2 {

 tcflag_t c_iflag;
 tcflag_t c_oflag;
 tcflag_t c_cflag;
 tcflag_t c_lflag;

 cc_t c_line;
 cc_t c_cc[19];
 speed_t c_ispeed;
 speed_t c_ospeed;

};
struct ktermios {
 tcflag_t c_iflag;
 tcflag_t c_oflag;

 tcflag_t c_cflag;
 tcflag_t c_lflag;
 cc_t c_line;
 cc_t c_cc[19];

 speed_t c_ispeed;
 speed_t c_ospeed;
};
# 20 "/data/data/com.termux/files/usr/include/asm/termbits.h" 2 3 4
# 22 "/data/data/com.termux/files/usr/include/asm-generic/termios.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/ioctls.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/ioctls.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/ioctls.h" 1 3 4
# 20 "/data/data/com.termux/files/usr/include/asm/ioctls.h" 2 3 4
# 23 "/data/data/com.termux/files/usr/include/asm-generic/termios.h" 2 3 4

struct winsize {
 unsigned short ws_row;
 unsigned short ws_col;
 unsigned short ws_xpixel;

 unsigned short ws_ypixel;
};

struct termio {

 unsigned short c_iflag;
 unsigned short c_oflag;
 unsigned short c_cflag;
 unsigned short c_lflag;

 unsigned char c_line;
 unsigned char c_cc[8];
};
# 20 "/data/data/com.termux/files/usr/include/asm/termios.h" 2 3 4
# 23 "/data/data/com.termux/files/usr/include/linux/termios.h" 2 3 4


struct termiox
{
 __u16 x_hflag;

 __u16 x_cflag;
 __u16 x_rflag[5];
 __u16 x_sflag;
};
# 38 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/ioctls.h" 1 3 4
# 39 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/termbits.h" 1 3 4
# 40 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/sys/ioctl_compat.h" 1 3 4
# 46 "/data/data/com.termux/files/usr/include/sys/ioctl_compat.h" 3 4
struct tchars {
 char t_intrc;
 char t_quitc;
 char t_startc;
 char t_stopc;
 char t_eofc;
 char t_brkc;
};

struct ltchars {
 char t_suspc;
 char t_dsuspc;
 char t_rprntc;
 char t_flushc;
 char t_werasc;
 char t_lnextc;
};






struct sgttyb {
 char sg_ispeed;
 char sg_ospeed;
 char sg_erase;
 char sg_kill;
 short sg_flags;
};
# 41 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 2 3 4
# 1 "/data/data/com.termux/files/usr/include/linux/tty.h" 1 3 4
# 42 "/data/data/com.termux/files/usr/include/sys/ioctl.h" 2 3 4



extern int ioctl(int, int, ...);
# 8 "capturev4l2.c" 2
# 1 "/data/data/com.termux/files/usr/include/sys/mman.h" 1 3 4
# 33 "/data/data/com.termux/files/usr/include/sys/mman.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm/mman.h" 1 3 4
# 19 "/data/data/com.termux/files/usr/include/asm/mman.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/mman.h" 1 3 4
# 21 "/data/data/com.termux/files/usr/include/asm-generic/mman.h" 3 4
# 1 "/data/data/com.termux/files/usr/include/asm-generic/mman-common.h" 1 3 4
# 22 "/data/data/com.termux/files/usr/include/asm-generic/mman.h" 2 3 4
# 20 "/data/data/com.termux/files/usr/include/asm/mman.h" 2 3 4
# 34 "/data/data/com.termux/files/usr/include/sys/mman.h" 2 3 4
# 46 "/data/data/com.termux/files/usr/include/sys/mman.h" 3 4
extern void* mmap(void*, size_t, int, int, int, off_t);
extern void* mmap64(void*, size_t, int, int, int, off64_t);
extern int munmap(void*, size_t);
extern int msync(const void*, size_t, int);
extern int mprotect(const void*, size_t, int);
extern void* mremap(void*, size_t, size_t, unsigned long);

extern int mlockall(int);
extern int munlockall(void);
extern int mlock(const void*, size_t);
extern int munlock(const void*, size_t);
extern int madvise(const void*, size_t, int);

extern int mlock(const void*, size_t);
extern int munlock(const void*, size_t);

extern int mincore(void*, size_t, unsigned char*);
# 9 "capturev4l2.c" 2






uint8_t *buffer;

static int xioctl(int fd, int request, void *arg)
{
        int r;

        do {

          r = ioctl (fd, request, arg);
          printf("%i\n", r);
          printf("%i\n", (*__errno()));
          printf("%i\n", 4);
        }
        while (-1 == r && 4 == (*__errno()));

        return r;
}

int print_caps(int fd)
{
        struct v4l2_capability caps = {};
        printf("about to query capacities\n");
        printf("macro: %s\n", (((2U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((0)) << 0) | ((((sizeof(struct v4l2_capability)))) << ((0 +8)+8))));
        if (-1 == xioctl(fd, (((2U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((0)) << 0) | ((((sizeof(struct v4l2_capability)))) << ((0 +8)+8))), &caps))
        {
               perror("Querying Capabilities");
               return 1;
        }
        printf( "Driver Caps:\n"
                "  Driver: \"%s\"\n"
                "  Card: \"%s\"\n"
                "  Bus: \"%s\"\n"
                "  Version: %d.%d\n"
                "  Capabilities: %08x\n",
                caps.driver,
                caps.card,
                caps.bus_info,
                (caps.version>>16)&&0xff,
                (caps.version>>24)&&0xff,
                caps.capabilities);


        struct v4l2_cropcap cropcap = {0};
        cropcap.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        if (-1 == xioctl (fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((58)) << 0) | ((((sizeof(struct v4l2_cropcap)))) << ((0 +8)+8))), &cropcap))
        {
                perror("Querying Cropping Capabilities");
                return 1;
        }

        printf( "Camera Cropping:\n"
                "  Bounds: %dx%d+%d+%d\n"
                "  Default: %dx%d+%d+%d\n"
                "  Aspect: %d/%d\n",
                cropcap.bounds.width, cropcap.bounds.height, cropcap.bounds.left, cropcap.bounds.top,
                cropcap.defrect.width, cropcap.defrect.height, cropcap.defrect.left, cropcap.defrect.top,
                cropcap.pixelaspect.numerator, cropcap.pixelaspect.denominator);

        int support_grbg10 = 0;

        struct v4l2_fmtdesc fmtdesc = {0};
        fmtdesc.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        char fourcc[5] = {0};
        char c, e;
        printf("  FMT : CE Desc\n--------------------\n");
        while (0 == xioctl(fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((2)) << 0) | ((((sizeof(struct v4l2_fmtdesc)))) << ((0 +8)+8))), &fmtdesc))
        {
                strncpy(fourcc, (char *)&fmtdesc.pixelformat, 4);
                if (fmtdesc.pixelformat == ((__u32)('B') | ((__u32)('A') << 8) | ((__u32)('1') << 16) | ((__u32)('0') << 24)))
                    support_grbg10 = 1;
                c = fmtdesc.flags & 1? 'C' : ' ';
                e = fmtdesc.flags & 2? 'E' : ' ';
                printf("  %s: %c%c %s\n", fourcc, c, e, fmtdesc.description);
                fmtdesc.index++;
        }







        struct v4l2_format fmt = {0};
        fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        fmt.fmt.pix.width = 640;
        fmt.fmt.pix.height = 480;


        fmt.fmt.pix.pixelformat = ((__u32)('M') | ((__u32)('J') << 8) | ((__u32)('P') << 16) | ((__u32)('G') << 24));
        fmt.fmt.pix.field = V4L2_FIELD_NONE;

        if (-1 == xioctl(fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((5)) << 0) | ((((sizeof(struct v4l2_format)))) << ((0 +8)+8))), &fmt))
        {
            perror("Setting Pixel Format");
            return 1;
        }

        strncpy(fourcc, (char *)&fmt.fmt.pix.pixelformat, 4);
        printf( "Selected Camera Mode:\n"
                "  Width: %d\n"
                "  Height: %d\n"
                "  PixFmt: %s\n"
                "  Field: %d\n",
                fmt.fmt.pix.width,
                fmt.fmt.pix.height,
                fourcc,
                fmt.fmt.pix.field);
        return 0;
}

int init_mmap(int fd)
{
    struct v4l2_requestbuffers req = {0};
    req.count = 1;
    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    req.memory = V4L2_MEMORY_MMAP;

    if (-1 == xioctl(fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((8)) << 0) | ((((sizeof(struct v4l2_requestbuffers)))) << ((0 +8)+8))), &req))
    {
        perror("Error Requesting Buffer");
        return 1;
    }

    struct v4l2_buffer buf = {0};
    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    buf.memory = V4L2_MEMORY_MMAP;
    buf.index = 0;
    if(-1 == xioctl(fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((9)) << 0) | ((((sizeof(struct v4l2_buffer)))) << ((0 +8)+8))), &buf))
    {
        perror("Querying Buffer");
        return 1;
    }

    buffer = mmap (((void*)0), buf.length, 0x1 | 0x2, 0x01, fd, buf.m.offset);
    printf("Length: %d\nAddress: %p\n", buf.length, buffer);
    printf("Image Length: %d\n", buf.bytesused);

    return 0;
}

int capture_image(int fd)
{
    printf("got here\n");
    struct v4l2_buffer buf = {0};
    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    buf.memory = V4L2_MEMORY_MMAP;
    buf.index = 0;
    if(-1 == xioctl(fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((15)) << 0) | ((((sizeof(struct v4l2_buffer)))) << ((0 +8)+8))), &buf))
    {
        perror("Query Buffer");
        return 1;
    }

    if(-1 == xioctl(fd, (((1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((18)) << 0) | ((((sizeof(int)))) << ((0 +8)+8))), &buf.type))
    {
        perror("Start Capture");
        return 1;
    }

    fd_set fds;
    (memset(&fds, 0, sizeof(*(fd_set*)(&fds))));
    ((((fd_set*)(&fds))->fds_bits)[((fd) / (8 * sizeof(unsigned long)))] |= (1UL << ((fd) % (8 * sizeof(unsigned long)))));
    struct timeval tv = {0};
    tv.tv_sec = 2;
    int r = select(fd+1, &fds, ((void*)0), ((void*)0), &tv);
    if(-1 == r)
    {
        perror("Waiting for Frame");
        return 1;
    }

    if(-1 == xioctl(fd, (((2U|1U) << (((0 +8)+8)+14)) | ((('V')) << (0 +8)) | (((17)) << 0) | ((((sizeof(struct v4l2_buffer)))) << ((0 +8)+8))), &buf))
    {
        perror("Retrieving Frame");
        return 1;
    }
    printf ("saving image\n");

    IplImage* frame;
    CvMat cvmat = cvMat(480, 640, CV_8UC3, (void*)buffer);
    frame = cvDecodeImage(&cvmat, 1);
    cvSaveImage("image.jpg", frame, 0);

    return 0;
}

int main()
{
        int fd;

        fd = open("/dev/video0", 00000002);
        if (fd == -1)
        {
                perror("Error Opening video device");
                return 1;
        }
        printf("opened device\n");
        if(print_caps(fd))
            return 1;
        printf("opened print caps\n");
        if(init_mmap(fd))
            return 1;
        printf("inited mmap\n");
        int i;
        for(i=0; i<5; i++)
        {
            if(capture_image(fd))
                return 1;
        }
        close(fd);
        return 0;
}
